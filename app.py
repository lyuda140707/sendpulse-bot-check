import logging
import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from typing import Callable, Dict, Any, Awaitable
import uvicorn
from aiogram.types import Update
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ú–µ–Ω—é-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ—à—É–∫üîç"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤üì∫"), KeyboardButton(text="–ó–∞ –∂–∞–Ω—Ä–æ–º")],
        [KeyboardButton(text="–ú—É–ª—å—Ç–∏–∫–∏üëß"), KeyboardButton(text="–§—ñ–ª—å–º–∏")],
        [KeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞ü¢úü¢õ")]
    ],
    resize_keyboard=True
)

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = '-1002564548405'
GROUP_URL = 'https://t.me/kinotochkanews'

# –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID)
allowed_users = [123456789]

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –≥—Ä—É–ø—É", url=GROUP_URL)]
])

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# Middleware
class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            # ‚ú® –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è /my_status
            if event.text and event.text.startswith("/my_status"):
                return await handler(event, data)

            if not await check_subscription(event.from_user.id):
                await event.reply("‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)
                return
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if await check_subscription(message.from_user.id):
        await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!\n–û–±–∏—Ä–∞–π –∂–∞–Ω—Ä, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ú–µ–Ω—é¬ª üëá", reply_markup=main_menu)
    else:
        await message.answer("‚ùå –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("‚ùì –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /menu, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.", reply_markup=main_menu)

@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")
    
@dp.message(Command("my_status"))
async def my_status(message: types.Message):
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, message.from_user.id)
        await message.answer(f"üìã –í–∞—à —Å—Ç–∞—Ç—É—Å —É –≥—Ä—É–ø—ñ: {chat_member.status}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")

@dp.message(F.text == "–ú–µ–Ω—é")
@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    await message.answer("–û—Å—å –≤–∞—à–µ –º–µ–Ω—é:", reply_markup=main_menu)

@dp.message(F.text == "–ü–æ—à—É–∫üîç")
@dp.message(Command("poisk"))
async def search_handler(message: types.Message):
    await message.reply("–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É.")

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤")
@dp.message(Command("serialiv"))
async def serials_handler(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
@dp.message(Command("zhanrom"))
async def genres_handler(message: types.Message):
    await message.reply("–°–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º.")

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏")
@dp.message(Command("multik"))
async def cartoons_handler(message: types.Message):
    await message.reply("–ú—É–ª—å—Ç–∏–∫–∏.")

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
@dp.message(Command("filmi"))
async def movies_handler(message: types.Message):
    await message.reply("–§—ñ–ª—å–º–∏.")

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
@dp.message(Command("zaprosy"))
async def invite_handler(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º...")

@dp.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥")
@dp.message(Command("pereglyad"))
async def view_handler(message: types.Message):
    await message.reply("üì∫ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message()
async def check_user(message: types.Message):
    if message.from_user.id not in allowed_users:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    await message.reply("‚ÑπÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∞–±–æ –∫–Ω–æ–ø–∫–∏.")

@app.post("/sendpulse-webhook")
async def sendpulse_webhook_handler(request: Request):
    try:
        data = await request.json()
        logging.info(f"SendPulse webhook: {data}")

        if isinstance(data, list) and data:
            telegram_id = data[0].get("telegram_id")
        elif isinstance(data, dict):
            telegram_id = data.get("telegram_id")
        else:
            telegram_id = None

        if telegram_id:
            is_subscribed = await check_subscription(int(telegram_id))
            return JSONResponse(content={"allowed": is_subscribed})

        return JSONResponse(content={"allowed": False})
    except Exception as e:
        logging.error(f"SendPulse error: {e}")
        return JSONResponse(content={"allowed": False})
        
@dp.message(Command("get_chat_id"))
async def get_chat_id(message: types.Message):
    await message.answer(
        f"üÜî Chat ID: `{message.chat.id}`\nüìå –¢–∏–ø: {message.chat.type}\nüìõ –ù–∞–∑–≤–∞: {message.chat.title}",
        parse_mode="Markdown"
    )


@app.post("/webhook")
async def telegram_webhook_handler(request: Request):
    try:
        data = await request.json()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ —Ç–æ—á–Ω–æ Telegram-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if isinstance(data, dict) and "update_id" in data:
            update = Update.model_validate(data)
            await dp.feed_update(bot, update)
        else:
            logging.warning(f"‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –Ω–µ Telegram-–¥–∞–Ω—ñ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ: {data}")
            
    except Exception as e:
        logging.error(f"Telegram Webhook error: {e}")
    
    return {"status": "ok"}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.get("/")
async def root():
    return {"status": "OK"}

if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
