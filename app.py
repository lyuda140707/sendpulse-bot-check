import logging
import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from typing import Callable, Dict, Any, Awaitable
import uvicorn
from aiogram.types import Update

# –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GROUP_CHAT_ID = '-1002591662949'
GROUP_URL = 'https://t.me/proKinotochka'

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –≥—Ä—É–ø—É", url=GROUP_URL)]
])

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# Middleware
class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            if not await check_subscription(event.from_user.id):
                await event.reply("üö´ –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)
                return  # –ë–ª–æ–∫—É—î–º–æ –¥–æ—Å—Ç—É–ø
        return await handler(event, data)

dp.message.middleware(SubscriptionMiddleware())

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!")

@dp.message(F.text == "–ú–µ–Ω—é")
@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    await message.reply("–û—Å—å –≤–∞—à–µ –º–µ–Ω—é.")

@dp.message(F.text == "–ü–æ—à—É–∫")
@dp.message(Command("poisk"))
async def search_handler(message: types.Message):
    await message.reply("–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É.")

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤")
@dp.message(Command("serialiv"))
async def serials_handler(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
@dp.message(Command("zhanrom"))
async def genres_handler(message: types.Message):
    await message.reply("–°–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º.")

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏")
@dp.message(Command("multik"))
async def cartoons_handler(message: types.Message):
    await message.reply("–ú—É–ª—å—Ç–∏–∫–∏.")

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
@dp.message(Command("filmi"))
async def movies_handler(message: types.Message):
    await message.reply("–§—ñ–ª—å–º–∏.")

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
@dp.message(Command("zaprosy"))
async def invite_handler(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º...")

@dp.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥")
@dp.message(Command("pereglyad"))
async def view_handler(message: types.Message):
    await message.reply("üì∫ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message()
async def fallback_handler(message: types.Message):
    await message.reply("‚ÑπÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∞–±–æ –∫–Ω–æ–ø–∫–∏.")

@app.post("/webhook")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        if isinstance(data, dict) and "update_id" in data:
            update = Update.model_validate(data)
            await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"Webhook error: {e}")
    return {"status": "ok"}
    
@app.post("/sendpulse-webhook")
async def sendpulse_webhook_handler(request: Request):
    try:
        data = await request.json()
        logging.info(f"SendPulse webhook: {data}")

        if isinstance(data, list) and data:
            telegram_id = data[0].get("telegram_id")
        elif isinstance(data, dict):
            telegram_id = data.get("telegram_id")
        else:
            telegram_id = None

        if telegram_id:
            is_subscribed = await check_subscription(int(telegram_id))
            return {"allowed": is_subscribed}

        return {"allowed": False}
    except Exception as e:
        logging.error(f"SendPulse error: {e}")
        return {"allowed": False}


# –ó–∞–ø—É—Å–∫ webhooks
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()

@app.get("/")
async def root():
    return {"status": "OK"}
    
# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=int(os.getenv("PORT", 8000)))