import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import TelegramObject, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Callable, Dict, Any, Awaitable
from aiogram.filters import Command

# –¢–æ–∫–µ–Ω —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
API_TOKEN = '7460110326:AAFZirpV7YU5T-OxwDegP0EemKjX0HUV4Gw'
GROUP_CHAT_ID = '-1002591662949'
GROUP_URL = 'https://t.me/proKinotochka'

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîî –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –≥—Ä—É–ø—É", url=GROUP_URL)]
])

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def check_subscription(user_id: int) -> bool:
    try:
        chat_member = await bot.get_chat_member(GROUP_CHAT_ID, user_id)
        logging.info(f"User {user_id} status: {chat_member.status}")
        return chat_member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

# Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
class SubscriptionMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, types.Message):
            if not await check_subscription(event.from_user.id):
                await event.reply("üö´ –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø—É:", reply_markup=subscribe_kb)
                return  # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        return await handler(event, data)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è middleware
dp.message.middleware(SubscriptionMiddleware())

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞!")

# –Ü–Ω—à—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ (–ú–µ–Ω—é, –ü–æ—à—É–∫, —Ç–æ—â–æ) ‚Äì –±–µ–∑ –∑–º—ñ–Ω

@dp.message(F.text == "–ú–µ–Ω—é")
async def menu_text_handler(message: types.Message):
    await message.reply("–û—Å—å –≤–∞—à–µ –º–µ–Ω—é.")

@dp.message(Command("menu"))
async def menu_command_handler(message: types.Message):
    await message.reply("–û—Å—å –≤–∞—à–µ –º–µ–Ω—é.")

@dp.message(F.text == "–ü–æ—à—É–∫")
async def search_text_handler(message: types.Message):
    await message.reply("–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É.")

@dp.message(Command("poisk"))
async def search_command_handler(message: types.Message):
    await message.reply("–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É.")

@dp.message(F.text == "–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤")
async def serials_text_handler(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(Command("serialiv"))
async def serials_command_handler(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(F.text == "–ó–∞ –∂–∞–Ω—Ä–æ–º")
async def genres_text_handler(message: types.Message):
    await message.reply("–°–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º.")

@dp.message(Command("zhanrom"))
async def genres_command_handler(message: types.Message):
    await message.reply("–°–µ—Ä—ñ–∞–ª–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º.")

@dp.message(F.text == "–ú—É–ª—å—Ç–∏–∫–∏")
async def cartoons_text_handler(message: types.Message):
    await message.reply("–ú—É–ª—å—Ç–∏–∫–∏.")

@dp.message(Command("multik"))
async def cartoons_command_handler(message: types.Message):
    await message.reply("–ú—É–ª—å—Ç–∏–∫–∏.")

@dp.message(F.text == "–§—ñ–ª—å–º–∏")
async def movies_text_handler(message: types.Message):
    await message.reply("–§—ñ–ª—å–º–∏.")

@dp.message(Command("filmi"))
async def movies_command_handler(message: types.Message):
    await message.reply("–§—ñ–ª—å–º–∏.")

@dp.message(F.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
async def invite_text_handler(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º...")

@dp.message(Command("zaprosy"))
async def invite_command_handler(message: types.Message):
    await message.reply("–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º...")

@dp.message(Command("pereglyad"))
async def view_handler(message: types.Message):await message.reply("üì∫ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message(F.text == "–ü–µ—Ä–µ–≥–ª—è–¥")
async def view_text_handler(message: types.Message):
    await message.reply("üì∫ –ü–µ—Ä–µ–≥–ª—è–¥ —Å–µ—Ä—ñ–∞–ª—ñ–≤.")

@dp.message()
async def fallback_handler(message: types.Message):
    await message.reply("‚ÑπÔ∏è –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –∞–±–æ –∫–Ω–æ–ø–∫–∏.")

async def main():
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))